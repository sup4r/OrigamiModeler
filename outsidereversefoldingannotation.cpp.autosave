#include "outsidereversefoldingannotation.h"

OutsideReverseFoldingAnnotation::OutsideReverseFoldingAnnotation(Halfedge2d *_he1, Halfedge2d *_he2, QObject *parent)
    :Annotation(parent)
{
    setHe1(_he1);
    setHe2(_he2);
    setColor(QColor(160,160,240));
    setSize(he1->getSize()+1);
    // ZOrder
    Face3d *f1 = he1->face->getFace3d();
    Face3d *f2 = he2->face->getFace3d();
    f1->setZOrderValue(f2->getZOrder()+1);
}

OutsideReverseFoldingAnnotation::~OutsideReverseFoldingAnnotation()
{
    emit(deleted(he1, he2));
}

Halfedge2d *OutsideReverseFoldingAnnotation::getHe1() const
{
    return he1;
}

void OutsideReverseFoldingAnnotation::setHe1(Halfedge2d *value)
{
    he1 = value;
}
Halfedge2d *OutsideReverseFoldingAnnotation::getHe2() const
{
    return he2;
}

void OutsideReverseFoldingAnnotation::setHe2(Halfedge2d *value)
{
    he2 = value;
}

QVector<Halfedge2d *> OutsideReverseFoldingAnnotation::getGlueHalfedge2ds()
{
    QVector<Halfedge2d*>glueEdges;
    if(isOverlapVertexSV1EV2()){
        glueEdges<<he1->prev;
    }else{
        glueEdges<<he1->next;
    }
    return glueEdges;
}

void OutsideReverseFoldingAnnotation::draw()
{
    
}

QVector3D OutsideReverseFoldingAnnotation::getOverlapPoint()
{
    QVector2D overlapPoint(-1, -1);
    static const double eps  =1e-10;
    QVector<Vertex2d*>vertices1, vertices2;
    vertices1<<he1->vertex<<he1->vertex_next;
    vertices2<<he2->vertex<<he2->vertex_next;
    for(int i = 0; i<vertices1.size(); ++i){
        QVector2D v1 = vertices1.at(i)->getVector2D();
        for(int j = 0; j<vertices2.size(); ++j){
            QVector2D v2 = vertices2.at(j)->getVector2D();
            if((v1-v2).length()<eps){
                overlapPoint = v1;
            }
        }
    }
    return overlapPoint;    
}


bool OutsideReverseFoldingAnnotation::isOverlapVertexSV1EV2()
{
    double eps = 1e-10;
    return (he1->getSV2D()-he2->getEV2D()).length()<eps;    
}
